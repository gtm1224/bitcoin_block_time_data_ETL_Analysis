# """
# author: Tim Guo
# ignore this file, this is a test place for general testing.
# """
# from threading import Thread, current_thread
# import json
# import pandas as pd
# import time
# from datetime import datetime
# import os
# from queue import Queue
# import requests
# from bitcoin_block_data_collection_multi_thread import Get_Current_dir
# from random import randint
# import concurrent.futures
# from concurrent.futures import ThreadPoolExecutor
# pd.set_option('expand_frame_repr', False)
# pd.set_option('display.max_rows', 5000)
#
#
# pd.set_option('expand_frame_repr', False)
# pd.set_option('display.max_rows', 5000)
#
#
# # =====construct API get request
# # get recent block info: https://blockchain.info/latestblock
# request_get_recent_block='https://blockchain.info/latestblock'
# # request_get_height_block_info = 'https://bitcoinexplorer.org/api/block/1099'
# request_get_height_block_info = 'https://blockchain.info/block-height/%s?format=json'
#
#
#
#
# # ====define a function to send get request
# def Send_Get_Request_To_API(url,max_try_num=10,sleep_time=5):
#     """
#     use python urlopen function to send get request to APIs
#     :param url: APIs or urls
#     :param max_try_num: maximum  times to try
#     :param sleep_time: request failed, then sleep for a certain period
#     :return: return response content
#     """
#
#     # some free proxies which do not work well
#     # these free proxies are tested through test_proxy using concurrent pool
#     # proxy={
#     #     'https':'103.80.77.1:443',
#     #     'http':'103.80.77.1:443',
#     #     'https': '165.16.46.215:8080',
#     #     'http': '165.16.46.215:8080',
#     #     'https': '171.244.22.27:3128',
#     #     'http': '171.244.22.27:3128',
#     #
#     #     'https': '103.80.83.166:8080',
#     #     'http': '103.80.83.166:8080',
#     #     'https': '182.253.28.124:8080',
#     #     'http': '182.253.28.124:8080',
#     #
#     #     'https': '43.250.127.98:9001',
#     #     'http': '43.250.127.98:9001',
#     # }
#     get_success = False  # check if get response successfully
#     # start trying request:
#     for i in range(max_try_num):
#         try:
#             headers= {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) '
#                              'Chrome/81.0.4044.122 Safari/537.36'}
#             content = requests.get(url=url,headers=headers,timeout=15).content
#             get_success = True
#             break
#         except Exception as e:
#             print('something went wrong，times：', i+1, 'error message：', e)
#             print('will retry after the sleep')
#             time.sleep(sleep_time)
#         # check if receives the response
#     if get_success:
#         return content
#     else:
#         # print('xxxxxxxxxxxxxxx URL PUSHED TO UNSUCCESSFUL URLS QUEUE xxxxxxxxxxxxxxx')
#         # unsuccessful_urls.put(url)
#         raise ValueError('reach error limit, please stop and check your code.')
#
#
# # ====create a Queue to store extracted data
# data_lake = Queue()
#
# # # ====create a Queue to store unsuccessful urls
# # unsuccessful_urls=Queue()
#
# # ====define a function to extract data from API
# def Get_Data():
#
#     while True:
#         try:
#             print(current_thread(), "start getting data>>:")
#             request = request_get_height_block_info % (h)
#             content = Send_Get_Request_To_API(url=request)
#             df=Transform_Data(content)
#             data_lake.put(df)
#             print("getting successfully")
#             break
#         except Exception as e:
#             print("error occur during getting data process: ",e)
#             print("retrying>>:")
#
#
#
# def Transform_Data(content):
#     content = json.loads(content)
#     block_time = content['blocks'][0]['time']
#     h =content['blocks'][0]['height']
#     df = pd.DataFrame(columns=['height', 'time'])
#     df = df.append({'height': h, 'time': block_time}, ignore_index=True)
#     return df
#
#
#
# def Load_Data():
#     while not data_lake.empty():
#         print(current_thread(), "start saving data>>:")
#         df =data_lake.get()
#         path = Get_Current_dir() + '/data/block_time_multi_thread_test.csv'
#         df.to_csv(path, index=False, mode='a',header=None)
#         print('saving successfully')
#
# # define a function to extract data from unsuccessful urls and load to CSV files
# # def Retry_Unsuccessful_Urls():
# #     url = unsuccessful_urls.get()
# #     print('retry unsuccessful url: ',url)
# #     content = Send_Get_Request_To_API(url=url)
# #     content =json.loads(content)
# #     block_time = datetime.fromtimestamp(content['blocks'][0]['time'])
# #     h=content['height']
# #     df = pd.DataFrame(columns=['height', 'time'])
# #     df = df.append({'height': h, 'time': block_time}, ignore_index=True)
# #     path = Get_Current_dir() + '/data/block_time_test.csv'
# #     df.to_csv(path, index=False, mode='a', header=None)
# #     print('saving successfully')
#
#
# if __name__ == '__main__':
#     # ==== get recent height of bitcoin block
#     content = Send_Get_Request_To_API(url=request_get_recent_block)
#     content = json.loads(content)
#     recent_height = content['height']
#     print('recent height of bitcoin block: ', recent_height)
#     path=Get_Current_dir() + '/data/block_time_multi_thread_test.csv'
#     # ====start fetching data
#     pd.DataFrame(columns=['height','time']).to_csv(path, index=False)
#     executor = ThreadPoolExecutor(max_workers=100)
#     for i in range(1000):
#         executor.submit(Get_Data(i))
#         executor.submit(Load_Data)
# import pandas as pd
# import numpy as np
# df1 = pd.DataFrame(np.random.randn(6, 4),
#                    index=list(range(0, 12, 2)),
#                    columns=list(range(0, 8, 2)))
# print(df1)
# df1.iloc[1,1]=5
# print(df1)
#
#
#
# df1= pd.DataFrame({
#     'height': [0, 2, 6, 7, 29],
#     'time': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],
#
# })
#
# df2= pd.DataFrame({
#     'height': range(29+1),
#     'time': ['' for i in  range(29+1)],
#
# })
#
# df_final = pd.concat([df1,df2],ignore_index=True)
# df_final.drop_duplicates(subset=['height'], inplace=True,keep='first')
# df_final.sort_values(by=['height'], inplace=True)
# df_final.reset_index(inplace=True, drop=True)
# print(df_final)
# df_request=df_final[df_final['time']=='']['height']
# print('df_request\n',df_request)
#
# print(list(df_request))
# # print(df_final[df['time']==''])
# # df.iloc[0,0]=1
# # # df.iloc[1,1]=3
# # print(df)
# # print(int('719,995'))
#
#
# l=[609562, 609563, 609564, 609565, 609566, 609567, 609568, 609569, 609570, 609571, 609572, 609573, 609574, 609575, 609576, 609577, 609578, 609579, 609580, 609581, 609582, 609583, 609584, 609585, 609586, 609587, 609588, 609589, 609590, 609591, 609592, 609593, 609594, 609595, 609596, 609597, 609598, 609599, 609600, 609601, 609602, 609603, 609604, 609605, 609606, 609607, 609608, 609609, 609610, 609611, 609612, 609613, 609614, 609615, 609616, 609617, 609618, 609619, 609620, 609621, 609622, 609623, 609624, 609625, 609626, 609627, 609628, 609629, 609630, 609631, 609632, 609633, 609634, 609635, 609908, 613508, 615608, 616205, 616206, 616207, 616208, 617007, 617008, 618909, 618910, 618911, 618912, 618913, 618914, 618915, 618916, 618917, 618918, 618919, 618920, 618921, 618922, 618923, 618924, 618925, 618926, 618927, 618928, 618929, 618930, 618931, 618932, 618933, 618934, 618935, 618936, 618937, 618938, 618939, 618940, 618941, 618942, 618943, 618944, 618945, 618946, 618947, 618948, 618949, 618950, 618951, 618952, 618953, 618954, 618955, 618956, 618957, 618958, 618959, 618960, 619087, 619088, 619089, 619090, 619091, 619092, 619093, 619094, 619095, 619096, 619097, 619098, 619099, 619100, 619101, 619102, 619103, 619104, 619105, 619106, 619107, 619108, 619161, 619162, 619163, 619164, 619165, 619166, 619167, 619168, 619169, 619170, 619171, 619172, 619173, 619174, 619175, 619176, 619177, 619178, 619179, 619180, 619181, 619182, 619183, 619184, 619185, 619186, 619187, 619188, 619189, 619190, 619191, 619192, 619193, 619194, 619195, 619196, 619197, 619198, 619199, 619200, 619201, 619202, 619203, 619204, 619205, 619206, 619207, 619208, 619405, 619406, 619407, 619408, 620009, 620010, 620011, 620012, 620013, 620014, 620015, 620016, 620017, 620018, 620019, 620020, 620021, 620022, 620023, 620024, 620025, 620026, 620027, 620028, 620029, 620030, 620031, 620032, 620033, 620034, 620035, 620036, 620037, 620038, 620039, 620040, 620041, 620042, 620043, 620044, 620045, 620046, 620047, 620048, 620049, 620050, 620051, 620052, 620053, 620054, 620055, 620056, 620057, 620058, 620059, 620060, 620061, 620062, 620063, 620064, 620065, 620066, 620067, 620068, 620069, 620070, 620071, 620072, 620073, 620074, 620075, 620076, 620077, 620078, 620079, 620080, 620081, 620082, 620083, 620084, 620085, 620086, 620087, 620088, 620089, 620090, 620091, 620092, 620093, 620094, 620095, 620096, 620097, 620098, 620099, 620100, 620101, 620102, 620103, 620104, 620105, 620106, 620107, 620108, 620306, 620307, 620308, 620602, 620603, 620604, 620605, 620606, 620607, 620608, 621808, 623709, 623710, 623711, 623712, 623713, 623714, 623715, 623716, 623717, 623718, 623719, 623720, 623721, 623722, 623723, 623724, 623725, 623726, 623727, 623728, 623729, 623730, 623731, 623732, 623733, 623734, 623735, 623736, 623737, 623738, 623739, 623740, 623741, 623742, 623743, 623744, 623745, 623746, 623747, 623748, 623749, 623750, 623751, 623752, 623753, 623754, 623755, 623756, 623757, 623758, 623759, 623760, 623761, 623762, 623763, 623764, 623765, 623766, 623767, 623768, 623769, 623770, 623771, 623772, 623773, 623774, 623909, 623910, 623911, 623912, 623913, 623914, 623915, 623916, 623917, 623918, 623919, 623920, 623921, 623922, 623923, 623924, 623925, 623926, 623927, 623928, 623929, 623930, 623931, 623932, 623933, 623934, 623935, 623936, 623937, 623938, 623939, 623940, 623941, 623942, 623943, 623944, 623945, 623946, 623947, 623948, 623949, 623950, 623951, 623952, 623953, 623954, 623955, 623956, 623957, 623958, 623959, 623960, 623961, 623962, 623963, 623964, 623965, 623966, 623967, 623968, 623969, 623970, 623971, 623972, 623973, 623974, 623975, 623976, 623977, 623978, 623979, 623980, 623981, 623982, 623983, 623984, 623985, 623986, 623987, 623988, 623989, 623990, 623991, 623992, 623993, 624294, 624295, 624296, 624297, 624298, 624299, 624300, 624301, 624302, 624303, 624304, 624305, 624306, 624307, 624308, 624905, 624906, 624907, 624908, 625423, 625424, 625425, 625426, 625427, 625428, 625429, 625430, 625431, 625432, 625433, 625434, 625435, 625436, 625437, 625438, 625439, 625440, 625441, 625442, 625443, 625444, 625445, 625446, 625447, 625448, 625449, 625450, 625451, 625452, 625453, 625454, 625455, 625456, 625457, 625458, 625459, 625460, 625461, 625462, 625463, 625464, 625465, 625466, 625467, 625468, 625469, 625470, 625471, 625472, 625473, 625474, 625475, 625476, 625477, 625478, 625479, 625480, 625481, 625482, 625483, 625484, 625485, 625486, 625487, 625488, 625489, 625490, 625491, 625492, 625493, 625494, 625495, 625496, 625497, 625498, 625499, 625500, 625501, 625502, 625503, 625504, 625505, 625506, 625507, 625508, 625673, 625674, 625675, 625676, 625677, 625678, 625679, 625680, 625681, 625682, 625683, 625684, 625685, 625686, 625687, 625688, 625689, 625690, 625691, 625692, 625693, 625694, 625695, 625696, 625697, 625698, 625699, 625700, 625701, 625702, 625703, 625704, 625705, 625706, 625707, 625708, 625809, 625810, 625811, 625812, 625813, 625814, 625815, 625816, 625817, 625818, 625819, 625820, 625821, 625822, 625823, 625824, 625825, 625826, 625827, 625828, 625829, 625830, 625831, 625832, 625833, 625834, 625835, 625836, 625837, 625838, 625839, 625840, 625841, 625842, 625843, 625844, 625845, 625846, 625847, 625848, 625849, 625850, 625851, 625852, 625853, 625854, 625855, 625856, 625857, 625858, 625859, 625860, 625861, 625862, 625863, 625864, 625865, 625866, 625867, 625868, 625869, 625870, 625871, 625872, 626905, 626906, 626907, 626908, 627199, 627200, 627201, 627202, 627203, 627204, 627205, 627206, 627207, 627208, 627309, 627310, 627311, 627312, 627313, 627314, 627315, 627316, 627317, 627318, 627319, 627320, 627321, 627322, 627323, 627324, 627325, 627326, 627327, 627328, 627329, 627330, 627331, 627332, 627333, 627334, 627335, 627336, 627337, 627338, 627339, 627340, 627341, 627342, 627343, 627344, 627345, 627346, 627347, 627348, 627349, 627350, 627351, 627352, 627353, 627354, 627355, 627356, 627357, 627358, 627359, 627360, 627361, 627362, 627363, 627364, 627365, 627366, 627367, 627368, 627369, 627370, 627371, 627372, 627373, 627374, 627375, 627376, 627377, 627378, 627379, 627380, 627381, 627382, 627383, 627384, 627385, 627386, 627387, 627388, 627389, 627390, 627391, 627392, 627393, 627394, 627395, 627396, 627397, 627398, 627399, 627400, 627401, 627402, 627403, 627404, 627405, 627406, 627407, 627408, 629107, 629108, 630808, 633507, 633508, 633807, 633808, 634180, 634181, 634182, 634183, 634184, 634185, 634186, 634187, 634188, 634189, 634190, 634191, 634192, 634193, 634194, 634195, 634196, 634197, 634198, 634199, 634200, 634201, 634202, 634203, 634204, 634205, 634206, 634207, 634208, 634809, 634810, 634811, 634812, 634813, 634814, 634815, 634816, 634817, 634818, 634819, 634820, 634821, 634822, 634823, 634824, 634825, 634826, 634827, 634828, 634829, 634830, 634831, 634832, 634833, 634834, 634835, 634836, 634837, 634838, 634839, 634840, 634841, 634842, 634843, 634844, 634845, 634846, 634847, 634848, 634849, 634850, 634851, 634852, 634853, 634854, 634855, 634856, 634857, 634858, 634859, 634860, 634861, 634862, 634863, 634864, 634865, 634866, 634867, 634868, 634907, 634908, 634969, 634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977, 634978, 634979, 634980, 634981, 634982, 634983, 634984, 634985, 634986, 634987, 634988, 634989, 634990, 634991, 634992, 634993, 634994, 634995, 634996, 634997, 634998, 634999, 635000, 635001, 635002, 635003, 635004, 635005, 635006, 635007, 635008, 637809, 637810, 637811, 637812, 637813, 637814, 637815, 637816, 637817, 637818, 637819, 637820, 637821, 637822, 637823, 637824, 637825, 637826, 637827, 637828, 637829, 637830, 637831, 637832, 637833, 637834, 638135, 638136, 638137, 638138, 638139, 638140, 638141, 638142, 638143, 638144, 638145, 638146, 638147, 638148, 638149, 638150, 638151, 638152, 638153, 638154, 638155, 638156, 638157, 638158, 638159, 638160, 638161, 638162, 638163, 638164, 638165, 638166, 638167, 638168, 638169, 638170, 638171, 638172, 638173, 638174, 638175, 638176, 638177, 638178, 638179, 638180, 638181, 638182, 638183, 638184, 638185, 638186, 638187, 638188, 638189, 638190, 638191, 638192, 638193, 638194, 638195, 638196, 638197, 638198, 638199, 638200, 638201, 638202, 638203, 638204, 638205, 638206, 638207, 638208, 638909, 638910, 638911, 638912, 638913, 638914, 638915, 638916, 638917, 638918, 638919, 638920, 638921, 638922, 638923, 638924, 638925, 638926, 638927, 638928, 638929, 638930, 638931, 638932, 638933, 638934, 638935, 638936, 638937, 638938, 638939, 638940, 638941, 638942, 638943, 638944, 638945, 639046, 639047, 639048, 639049, 639050, 639051, 639052, 639053, 639054, 639055, 639056, 639057, 639058, 639059, 639060, 639061, 639062, 639063, 639064, 639065, 639066, 639067, 639068, 639069, 639070, 639071, 639072, 639073, 639074, 639075, 639076, 639077, 639078, 639079, 639080, 639081, 639082, 639083, 639084, 639085, 639086, 639087, 639088, 639089, 639090, 639091, 639092, 639093, 639094, 639095, 639096, 639097, 639098, 639099, 639100, 639101, 639102, 639103, 639104, 639105, 639106, 639107, 639108, 640599, 640600, 640601, 640602, 640603, 640604, 640605, 640606, 640607, 640608, 644404, 644405, 644406, 644407, 644408, 645306, 645307, 645308, 645609, 645610, 645611, 645612, 645613, 645614, 645615, 645616, 645617, 645618, 645619, 645620, 645621, 645622, 645623, 645624, 645625, 645626, 645627, 645628, 645629, 645630, 645631, 645632, 645633, 645634, 645635, 645636, 645637, 645638, 645639, 645640, 645641, 645642, 645643, 645644, 645645, 645646, 645647, 645648, 645649, 645650, 645651, 645652, 645653, 645654, 645655, 645656, 645657, 645658, 645659, 645660, 645661, 645662, 645663, 645664, 645665, 645666, 645667, 645668, 645669, 645670, 645671, 645772, 645773, 645774, 645775, 645776, 645777, 645778, 645779, 645780, 645781, 645782, 645783, 645784, 645785, 645786, 645787, 645788, 645789, 645790, 645791, 645792, 645793, 645794, 645795, 645796, 645797, 645798, 645799, 645800, 645801, 645802, 645803, 645804, 645805, 645806, 645807, 645808, 646306, 646307, 646308, 647209, 647210, 647211, 647212, 647213, 647214, 647215, 647216, 647217, 647218, 647219, 647220, 647221, 647222, 647223, 647224, 647225, 647226, 647227, 647228, 647229, 647230, 647231, 647232, 647233, 647234, 647235, 647236, 647237, 647238, 647239, 647240, 647241, 647242, 647243, 647244, 647245, 647246, 647247, 647248, 647249, 647250, 647251, 647252, 647253, 647254, 647255, 647256, 647257, 647258, 647259, 647260, 647261, 647262, 647263, 647264, 647265, 647266, 647267, 647268, 647269, 647270, 647271, 647272, 647273, 647274, 647275, 647276, 647277, 647278, 647279, 647280, 647281, 647282, 647283, 647284, 647285, 647286, 647287, 647288, 647289, 647290, 647291, 647292, 647293, 647294, 647295, 647296, 647297, 647298, 647299, 647300, 647301, 647302, 647303, 647304, 647305, 647306, 647307, 647308, 650487, 650488, 650489, 650490, 650491, 650492, 650493, 650494, 650495, 650496, 650497, 650498, 650499, 650500, 650501, 650502, 650503, 650504, 650505, 650506, 650507, 650508, 653504, 653505, 653506, 653507, 653508, 653808, 654709, 654710, 654711, 654712, 654713, 654714, 654715, 654716, 654717, 654718, 654719, 654720, 654721, 654722, 654723, 654724, 654725, 654726, 654727, 654728, 654729, 654730, 654731, 654732, 654733, 654734, 654735, 654736, 654737, 654738, 654739, 654740, 654741, 654742, 654743, 654744, 654745, 654746, 654747, 654748,658318, 658319, 658320, 658321, 658322, 658323, 658324, 658325, 658326, 658327, 658328, 658329, 658330, 658331, 658332, 658333, 658334, 658335, 658336, 658337, 658338, 658339, 658340, 658341, 658342, 658343, 658344, 658345, 658346, 658347, 658348, 658349, 658350, 658351, 658352, 658353, 658354, 658355, 658358, 658359, 658360, 658361, 658362, 658363, 658364, 658365, 658366, 658367, 658368, 658369, 658370, 658371, 658372, 658373, 658374, 658375, 658376, 658377, 658378, 658379, 658380, 658381, 658382, 658383, 658384, 658385, 658386, 658387, 658388, 658389, 658390, 658391, 658392, 658393, 658394, 658395, 658396, 658397, 658398, 658399, 658400, 658401, 658402, 658403, 658404, 658405, 658406, 658407, 658408, 658808, 662000, 662001, 662002, 662003, 662004, 662005, 662006, 662007, 662008, 662307, 662308, 663002, 663003, 663004, 663005, 663006, 663007, 663008, 663509, 663510, 663511, 663512, 663513, 663514, 663515, 663516, 663517, 663518, 663519, 663520, 663521, 663522, 663523, 663524, 663525, 663526, 663527, 663528, 663529, 663530, 663531, 663532, 663533, 663534, 663535, 663536, 663537, 663538, 663539, 663540, 663541, 663542, 663543, 663544, 663545, 663546, 663547, 663548, 663549, 663550, 663551, 663552, 663553, 663554, 663555, 663556, 663557, 663558, 663559, 663560, 663561, 663562, 663563, 663564, 663565, 663566, 663567, 663568, 663569, 663570, 663571, 663572, 663573, 663890, 663891, 663892, 663893, 663894, 663895, 663896, 663897, 663898, 663899, 663900, 663901, 663902, 663903, 663904, 663905, 663906, 663907, 663908, 667106, 667107, 667108, 667109, 667110, 667111, 667112, 667113, 667114, 667115, 667216, 667217, 667218, 667219, 667220, 667221, 667222, 667223, 667224, 667225, 667226, 667227, 667228, 667229, 667230, 667231, 667232, 667233, 667234, 667235, 667236, 667237, 667238, 667239, 667240, 667241, 667242, 667243, 667244, 667245, 667246, 667247, 667248, 667249, 667250, 667251, 667252, 667253, 667254, 667255, 667256, 667257, 667258, 667259, 667260, 667261, 667262, 667263, 667264, 667265, 667266, 667267, 667268, 667269, 667270, 667271, 667272, 667273, 667274, 667275, 667276, 667277, 667278, 667279, 667280, 667281, 667282, 667283, 667284, 667285, 667286, 667287, 667288, 667289, 667290, 667291, 667292, 667293, 667294, 667295, 667296, 667297, 667298, 667299, 667300, 667301, 667302, 667303, 667304, 667305, 667601, 667602, 667603, 667604, 667605, 667606, 667607, 667608, 669508, 673909, 673910, 673911, 673912, 673913, 673914, 673915, 673916, 673917, 673918, 673919, 673920, 673921, 673922, 673923, 673924, 673925, 673926, 673927, 673928, 673929, 673930, 673931, 673932, 673933, 673934, 673935, 673936, 673937, 673938, 673939, 673940, 673941, 673942, 673943, 673944, 673945, 673946, 673947, 673948, 673949, 673950, 673951, 673952, 673953, 673954, 673955, 673956, 673957, 673958, 673959, 673960, 673961, 673962, 673963, 673964, 673965, 673966, 673967, 673968, 673969, 673970, 673971, 673972, 673973, 673974, 673975, 673976, 673977, 673978, 673979, 673980, 673981, 673982, 673983, 673984, 673985, 673986, 673987, 673988, 673989, 673990, 673991, 673992, 673993, 673994, 673995, 673996, 673997, 673998, 673999, 674000, 674001, 674002, 674003, 674004, 674005, 674006, 674007, 674008, 674506, 674507, 674508, 675608, 675709, 675710, 675711, 675712, 675713, 675714, 675715, 675716, 675717, 675718, 675719, 675720, 675721, 675722, 675723, 675724, 675725, 675726, 675727, 675728, 675729, 675730, 675731, 675732, 675733, 675734, 675735, 675736, 675737, 675738, 675739, 675740, 675741, 675742, 675743, 675744, 675745, 675746, 675747, 675748, 675749, 675750, 675751, 675752, 675753, 675754, 675755, 675756, 675757, 675758, 675759, 675760, 675761, 675762, 675763, 675764, 675765, 675766, 675767, 675768, 675769, 675770, 675771, 675772, 675773, 675774, 675775, 675776, 675777, 675778, 675779, 675780, 675781, 675782, 675783, 675784, 675785, 675786, 675787, 675788, 675789, 675790, 675791, 675792, 675793, 675794, 675795, 675796, 675797, 675799, 675800, 675801, 675802, 675803, 675804, 675805, 675806, 675807, 675808, 676009, 676010, 676011, 676012, 676013, 676014, 676015, 676016, 676017, 676018, 676019, 676020, 676021, 676022, 676023, 676024, 676025, 676026, 676027, 676028, 676029, 676030, 676031, 676032, 676033, 676034, 676035, 676036, 676037, 676038, 676039, 676040, 676041, 676042, 676043, 676044, 676045, 676046, 676047, 676048, 676049, 676050, 676051, 676052, 676053, 676054, 676055, 676056, 676057, 676058, 676059, 676060, 676061, 676062, 676063, 676064, 676065, 676066, 676067, 676068, 676069, 676070, 676071, 676072, 676073, 676074, 676075, 676076, 676077, 676078, 676079, 676080, 676081, 676082, 676083, 676084, 676085, 676086, 676087, 676088, 676089, 676090, 676091, 676092, 676093, 676094, 676095, 676096, 676097, 676098, 676199, 676200, 676201, 676202, 676203, 676204, 676205, 676206, 676207, 676208, 677905, 677906, 677907, 677908, 679454, 679455, 679456, 679457, 679458, 679459, 679460, 679461, 679462, 679463, 679464, 679465, 679466, 679467, 679468, 679469, 679470, 679471, 679472, 679473, 679474, 679475, 679476, 679477, 679478, 679479, 679480, 679481, 679482, 679483, 679484, 679485, 679486, 679487, 679488, 679489, 679490, 679491, 679492, 679493, 679494, 679495, 679496, 679497, 679498, 679499, 679500, 679501, 679502, 679503, 679504, 679505, 679506, 679507, 679508, 681104, 681105, 681106, 681107, 681108, 681219, 681220, 681221, 681222, 681223, 681224, 681225, 681226, 681227, 681228, 681229, 681230, 681231, 681232, 681233, 681234, 681235, 681236, 681237, 681238, 681239, 681240, 681241, 681242, 681243, 681244, 681245, 681246, 681247, 681248, 681249, 681250, 681251, 681252, 681253, 681254, 681255, 681256, 681257, 681258, 681259, 681260, 681261, 681262, 681263, 681264, 681265, 681266, 681267, 681268, 681269, 681270, 681271, 681272, 681273, 681274, 681275, 681276, 681277, 681278, 681279, 681280, 681281, 681282, 681283, 681284, 681285, 681286, 681287, 681288, 681289, 681290, 681291, 681292, 681293, 681294, 681295, 681296, 681297, 681298, 681299, 681300, 681301, 681302, 681303, 681304, 681305, 681306, 681307, 681308, 684909, 684910, 684911, 684912, 684913, 684914, 684915, 684916, 684917, 684918, 684919, 684920, 684921, 684922, 684923, 684924, 684925, 684926, 684927, 684928, 684929, 684930, 684931, 684932, 684933, 684934, 684935, 684936, 684937, 684938, 684939, 684940, 684941, 684942, 684943, 684944, 684945, 684946, 684947, 684948, 684949, 684950, 684951, 684952, 684953, 684954, 684955, 684956, 684957, 684958, 684959, 684960, 684961, 684962, 684963, 684964, 684965, 684966, 684967, 684968, 684969, 684970, 684971, 684972, 684973, 684974, 684975, 684976, 684977, 684978, 684979, 684980, 684981, 684982, 684983, 684984, 684985, 684986, 684987, 684988, 684989, 684990, 684991, 684992, 684993, 684994, 684995, 684996, 684997, 684998, 684999, 685000, 685001, 685002, 685003, 685004, 685005, 685006, 685007, 685008, 685491, 685492, 685493, 685494, 685495, 685496, 685497, 685498, 685499, 685500, 685501, 685502, 685503, 685504, 685505, 685506, 685507, 685508, 686906, 686907, 686908, 689850, 689851, 689852, 689853, 689854, 689855, 689856, 689857, 689858, 689859, 689860, 689861, 689862, 689863, 689864, 689865, 689866, 689867, 689868, 689869, 689870, 689871, 689872, 689873, 689874, 689875, 689876, 689877, 689878, 689879, 689880, 689881, 689882, 689883, 689884, 689885, 689886, 689887, 689888, 689889, 689890, 689891, 689892, 689893, 689894, 689895, 689896, 689897, 689898, 689899, 689900, 689901, 689902, 689903, 689904, 689905, 689906, 689907, 689908, 691997, 691998, 691999, 692000, 692001, 692002, 692003, 692004, 692005, 692006, 692007, 692008, 693008, 694209, 694210, 694211, 694212, 694213, 694214, 694215, 694216, 694217, 694218, 694219, 694220, 694221, 694222, 694223, 694224, 694225, 694226, 694227, 694228, 694229, 694230, 694231, 694232, 694233, 694234, 694235, 694236, 694237, 694238, 694239, 694240, 694241, 694242, 694243, 694244, 694245, 694246, 694247, 694248, 694249, 694250, 694251, 694252, 694253, 694254, 694255, 694256, 694257, 694258, 694259, 694260, 694261, 694262, 694263, 694264, 694265, 694266, 694267, 694268, 694269, 694270, 694271, 694272, 694273, 694274, 694275, 694276, 694277, 694278, 694279, 694280, 694381, 694382, 694383, 694384, 694385, 694386, 694387, 694388, 694389, 694390, 694391, 694392, 694393, 694394, 694395, 694396, 694397, 694398, 694399, 694400, 694401, 694402, 694403, 694404, 694405, 694406, 694407, 694408, 697208, 699249, 699250, 699251, 699252, 699253, 699254, 699255, 699256, 699257, 699258, 699259, 699260, 699261, 699262, 699263, 699264, 699265, 699266, 699267, 699268, 699269, 699270, 699271, 699272, 699273, 699274, 699275, 699276, 699277, 699278, 699279, 699280, 699281, 699282, 699283, 699284, 699285, 699286, 699287, 699288, 699289, 699290, 699291, 699292, 699293, 699294, 699295, 699296, 699297, 699298, 699299, 699300, 699301, 699302, 699303, 699304, 699305, 699306, 699307, 701192, 701193, 701194, 701195, 701196, 701197, 701198, 701199, 701200, 701201, 701202, 701203, 701204, 701205, 701206, 701207, 706808, 706809, 706810, 706811, 706812, 706813, 706814, 706815, 706816, 706817, 706818, 706819, 706820, 706821, 706822, 706823, 706824, 706825, 706826, 706827, 706828, 706829, 706830, 706831, 706832, 706833, 706834, 706835, 706836, 706837, 706838, 706839, 706840, 706841, 706842, 706843, 706844, 706845, 706846, 706847, 706848, 706849, 706850, 706851, 706852, 706853, 706854, 706855, 706856, 706857, 706858, 706859, 706860, 706861, 706862, 706863, 706864, 706865, 706866, 706867, 706868, 706869, 706870, 706871, 706872, 706873, 706874, 706875, 706876, 706877, 706878, 706879, 706880, 706881, 706882, 706883, 706884, 706885, 706886, 706887, 706888, 706889, 706890, 706891, 706892, 706893, 706902, 706903, 706904, 706905, 706906, 706907, 707108, 707109, 707110, 707111, 707112, 707113, 707114, 707115, 707116, 707117, 707118, 707119, 707120, 707121, 707122, 707123, 707124, 707125, 707126, 707127, 707128, 707129, 707130, 707131, 707132, 707133, 707134, 707135, 707136, 707137, 707138, 707139, 707140, 707141, 707142, 707143, 707144, 707145, 707146, 707147, 707148, 707149, 707150, 707151, 707152, 707153, 707154, 707155, 707156, 707157, 707158, 707159, 707160, 707161, 707162, 707163, 707164, 707165, 707166, 707167, 707168, 707169, 707194, 707195, 707196, 707197, 707198, 707199, 707200, 707201, 707202, 707203, 707204, 707205, 707206, 707207, 707370, 707371, 707372, 707373, 707374, 707375, 707376, 707377, 707378, 707379, 707380, 707381, 707382]
# print(len(l))